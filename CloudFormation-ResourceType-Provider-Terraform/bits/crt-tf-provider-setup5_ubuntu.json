{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This CloudFormation template creates the necessary resources or the Cloudsoft::Terraform::Infrastructure to work as expected. For instance, this creates: - a role assumed by CloudFormation during CRUDL operations to ship logs to CloudWatch. - a log group were the log will be ship to. - parameters for the SSH connection to the Terraform server\n",
  "Parameters": {
    "SubnetID": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Id of an existing subnet ",
      "ConstraintDescription": "Must be an existing subnet in the selected Virtual Private Cloud."
    },
    "SGname": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "SecurityGroup"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "ParameterStoreSShport": {
      "Description": "Port of the Terraform Server",
      "Default": "22",
      "Type": "String"
    },
    "ParameterStoreSSHusername": {
      "Description": "ssh-username to connect to the Terraform Server",
      "Type": "String",
      "Default": "ubuntu"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "HVM64": "ami-04763b3055de4860b"
      },
      "us-east-2": {
        "HVM64": "ami-0d5d9d301c853a04a"
      },
      "us-west-1": {
        "HVM64": "ami-0dd655843c87b6930"
      },
      "us-west-2": {
        "HVM64": "ami-0994c095691a46fb5"
      },
      "eu-west-1": {
        "HVM64": "ami-04b9e92b5572fa0d1"
      },
      "ap-northeast-1": {
        "HVM64": "ami-04b9e92b5572fa0d1"
      },
      "ap-southeast-1": {
        "HVM64": "ami-04b9e92b5572fa0d1"
      }
    }
  },
  "Resources": {
    "CRTFEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ec2regpol",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
                    }
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${CTRLogBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CTRLogBucket}"
                    }
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudformation:*",
                    "servicecatalog:*",
                    "ses:*"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "CRTFEC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CRTFEC2Role"
          }
        ]
      }
    },
    "CTRLogBucket": {
      "Type": "AWS::S3::Bucket"
    },
 
    "TerraformServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "CRTFEC2InstanceProfile"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "CTR-tf-provider"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": "t2.2xlarge",
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "SGname"
              }
            ],
            "SubnetId": {
              "Ref": "SubnetID"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "sudo apt update && sudo apt upgrade\n",
                "sudo apt install -y unzip\n",
                "sudo apt install -y python3-pip\n",
                "sudo pip3 install --upgrade pip\n",
                "curl 'https://s3.amazonaws.com/aws-cli/awscli-bundle.zip' -o 'awscli.zip'\n",
                "unzip awscli.zip\n",
                "sudo ln -s /usr/bin/python3 /usr/bin/python\n",
                "sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
                "wget https://releases.hashicorp.com/terraform/0.12.16/terraform_0.12.16_linux_amd64.zip\n",
                "unzip terraform_0.12.16_linux_amd64.zip\n",
                "sudo mv terraform /usr/local/bin/\n",
                "curl  'https://kwdem0s.s3.amazonaws.com/cfn/public/cs/bits/setup_scripts.zip'  -o '/home/ubuntu/scripts-enduser.zip'\n",
                "cd /home/ubuntu/\n",
                "echo sshhostname=$$1 >>s00_envset.sh\n",
                "echo EXECUTION_ROLE_ARN=",
                {
                  "Fn::GetAtt": "ExecutionRole.Arn"
                },
                " >>s00_envset.sh\n",
                "echo LOGGING_ROLE_ARN=",
                {
                  "Fn::GetAtt": "LoggingRole.Arn"
                },
                " >>s00_envset.sh\n",
                "echo LOG_GROUP_NAME=",
                {
                  "Ref": "LogGroup"
                },
                " >>s00_envset.sh\n",
                "unzip scripts-enduser.zip\n",
                "chown ubuntu:ubuntu s0* \n"
              ]
            ]
          }
        }
      }
    },
    "ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "MaxSessionDuration": 8400,
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "resources.cloudformation.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ResourceTypePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "ssm:GetParameter"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LoggingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudformation.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LogAndMetricsDeliveryRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "cloudwatch:ListMetrics",
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "cloudsoft-terraform-infrastructure-logs",
              {
                "Fn::Select": [
                  1,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 7
      }
    },
    "TerraformSSHHostParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Terraform server host to connect to for SSH connections",
        "Name": "/cfn/terraform/ssh-host",
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "TerraformServer",
            "PublicDnsName"
          ]
        }
      }
    },
    "TerraformSSHPortParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Terraform server port to connect to for SSH connections",
        "Name": "/cfn/terraform/ssh-port",
        "Type": "String",
        "Value": {
          "Ref": "ParameterStoreSShport"
        }
      }
    },
    "TerraformSSHUsernameParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Username of the Terraform server host for SSH connections",
        "Name": "/cfn/terraform/ssh-username",
        "Type": "String",
        "Value": {
          "Ref": "ParameterStoreSSHusername"
        }
      }
    },
    "TerraformSSHKeyParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Private SSH key of the CloudFormation client for SSH connections",
        "Name": "/cfn/terraform/ssh-key",
        "Type": "String",
        "Value": "(FIXME)"
      }
    },
    "TerraformSSHFingerprintParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Description": "Public SSH key fingerprint of the Terraform server to verify SSH connections",
        "Name": "/cfn/terraform/ssh-fingerprint",
        "Type": "String",
        "Value": "(FIXME)"
      }
    }
  },
  "Outputs": {
    "SystemsManager": {
      "Description": "Systems Manager parameters",
      "Value": {
        "Fn::Sub": "https://console.aws.amazon.com/systems-manager/parameters?region=${AWS::Region}"
      }
    },
 
    "SetupSteps": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "[. ./s00_envset.sh ]",
            {
              "Fn::GetAtt": [
                "TerraformServer",
                "PublicDnsName"
              ]
            },
            " <br>[./s02_set_para_finger.sh] ",
            {
              "Fn::GetAtt": [
                "TerraformServer",
                "PublicDnsName"
              ]
            }
            
          ]
        ]
      },
      "Description": "setup steps"
    },
    "PublicDNSName": {
      "Value": {
        "Fn::GetAtt": [
          "TerraformServer",
          "PublicDnsName"
        ]
      },
      "Description": "DNS Name of the newly created TerraformServer s00_envset.sh "
    },
    "LoggingRoleArn": {
      "Value": {
        "Fn::GetAtt": "LoggingRole.Arn"
      }
    },
    "LogGroup": {
      "Value": {
        "Ref": "LogGroup"
      }
    },
    "TerraformSSHFingerprintParameter": {
      "Value": {
        "Ref": "TerraformSSHFingerprintParameter"
      }
    },
    "ExecutionRoleArn": {
      "Value": {
        "Fn::GetAtt": "ExecutionRole.Arn"
      }
    }
  }
}